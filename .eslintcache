[{"/home/juli/Documents/nexogen/truck-timeline/src/index.js":"1","/home/juli/Documents/nexogen/truck-timeline/src/App.js":"2","/home/juli/Documents/nexogen/truck-timeline/src/reportWebVitals.js":"3","/home/juli/Documents/nexogen/truck-timeline/src/components/Layout.js":"4","/home/juli/Documents/nexogen/truck-timeline/src/components/stateless/TimePoint.js":"5","/home/juli/Documents/nexogen/truck-timeline/src/components/stateless/Truck.js":"6","/home/juli/Documents/nexogen/truck-timeline/src/components/stateless/Order.js":"7","/home/juli/Documents/nexogen/truck-timeline/src/components/stateless/VerticalSlider.js":"8","/home/juli/Documents/nexogen/truck-timeline/src/components/stateless/HorizontalSlider.js":"9","/home/juli/Documents/nexogen/truck-timeline/src/utils/utilities.js":"10"},{"size":500,"mtime":1611088462523,"results":"11","hashOfConfig":"12"},{"size":181,"mtime":1611090766363,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1611088462523,"results":"14","hashOfConfig":"12"},{"size":8515,"mtime":1611565765661,"results":"15","hashOfConfig":"12"},{"size":345,"mtime":1611518553210,"results":"16","hashOfConfig":"12"},{"size":2125,"mtime":1611565623134,"results":"17","hashOfConfig":"12"},{"size":1649,"mtime":1611565535534,"results":"18","hashOfConfig":"12"},{"size":724,"mtime":1611509148557,"results":"19","hashOfConfig":"12"},{"size":723,"mtime":1611431391293,"results":"20","hashOfConfig":"12"},{"size":964,"mtime":1611564750120,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ivdhng",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/juli/Documents/nexogen/truck-timeline/src/index.js",[],["44","45"],"/home/juli/Documents/nexogen/truck-timeline/src/App.js",[],"/home/juli/Documents/nexogen/truck-timeline/src/reportWebVitals.js",[],"/home/juli/Documents/nexogen/truck-timeline/src/components/Layout.js",["46","47"],"import React, {useState, useEffect} from 'react';\n//import dataRead from '../data.json';\nimport {formatDate, textDateToTimeStamp} from '../utils/utilities';\nimport TimePoint from './stateless/TimePoint';\nimport Truck from './stateless/Truck';\nimport VerticalSlider from './stateless/VerticalSlider';\nimport HorizontalSlider from './stateless/HorizontalSlider';\nimport axios from 'axios';\n\nfunction Layout() {\n    const offsetDistance = 5; //%\n    const laggingDistance = 18;\n    const numberOfTimePs = 3;\n    const truckStepSize = 15; //vh\n    const truckLineOffset= 10;\n    const timeStep = 4*60*60*1000; //4 hours\n    const timeLineWidth = ((numberOfTimePs - 1)*timeStep*100)/(100 - (offsetDistance + laggingDistance));\n\n    const [data, setData] = useState();\n    const [trucks, setTrucks] = useState([]);\n    const [orders, setOrders] = useState([]);\n    const [displayedTrucks, setDisplayedTrucks] = useState([]);\n    const [datesShown, setDatesShown] = useState([]);\n    const [verticalPosition, setVerticalPosition] = useState(100);\n    const [horizontalPosition, setHorizontalPosition] = useState(0);\n    const [filterOn, setFilterOn] = useState(false);\n\n    const calculateAbsoluteT0 = () => {\n        const t0 = datesShown[0];\n        const absT0 = t0 - (timeLineWidth*(offsetDistance/100));\n        return absT0;\n    }\n    \n    const calculateTimePointDistance = (timepoint, t0, tN) => {\n        const mainDistance  = tN - t0;\n        const hundredPercent = (mainDistance/(100 - (offsetDistance + laggingDistance)))*100;\n        const actualT0 = t0 - hundredPercent*(offsetDistance/100);\n        if (timepoint < actualT0) return false;\n        return ((timepoint - actualT0)/hundredPercent)*100;\n    }\n\n    const calculateTimePointOffset = (timepoint) => {\n        const t0 = datesShown[0];\n        const tN = datesShown[datesShown.length - 1];\n        const currOffset =  calculateTimePointDistance(timepoint, t0, tN) + \"%\";\n        return currOffset;\n    }\n\n    const calculateMinTime = (ords) => {\n        const fromDates = ords.map(order => textDateToTimeStamp(order.from)); // in chrome works even the new Date(order.from).getTime()\n        const minTime = Math.min(...fromDates);\n        return minTime;\n    }\n\n    const calculateMaxTime = () => {\n        const toDates = orders.map(order => textDateToTimeStamp(order.to));\n        const maxTime = Math.max(...toDates);\n        return maxTime;\n    }\n\n    const calculateHorizontalUnit = () => {\n        const minTime = calculateMinTime(orders);\n        const maxTime = calculateMaxTime();\n        //calc diff\n        const timeDiff = maxTime - minTime;\n        //calc and return unit\n        const horizontalUnit = Math.floor(timeDiff/100);\n        return horizontalUnit;\n    }\n\n    const generateDisplayedTimePoints = (firstTimePoint, numberOfTimePs) => {\n        //const firstTimeStamp = new Date(firstTimePoint).getTime();\n        \n        let timepoints = [firstTimePoint];\n        let nextTimePoint = Number(firstTimePoint);\n        for (let i = 0; i < numberOfTimePs - 1; i++){\n            nextTimePoint = nextTimePoint + timeStep;\n            timepoints.push(nextTimePoint);\n        }\n        return timepoints;\n    }\n\n    const setDefaults = () => {\n        setOrders(data.orders);\n        setTrucks(data.trucks);\n        let currentTrucksPositions = calculateDefaultPositions();\n        setDisplayedTrucks(currentTrucksPositions);\n    }\n\n    const handleSearchRequest = (ev) => {\n        const text = ev.target.value;\n        const truckArray = text.split(\" \");\n        const truckNames = trucks.map( truck => truck.name);\n        const newPositions = [];\n        let inx;\n        for(let truck of truckArray){\n            inx = truckNames.indexOf(truck);\n            if (inx > -1) newPositions.push(inx);\n        }\n        if (newPositions.length > 0){\n            setFilterOn(true);\n        } else {\n            setFilterOn(false);\n            setDefaults();\n        }\n\n        if (newPositions.length > 4){\n            newPositions.splice(0,4);\n        }\n\n        setDisplayedTrucks(newPositions);\n\n    }\n\n\n    const calculateDefaultPositions = () => {\n        let currentTrucksPositions = []; \n        for(let i = 0; i < numberOfTimePs; i++){\n            currentTrucksPositions.push(i);\n        }\n        return currentTrucksPositions;\n    }\n\n    useEffect(() => {\n/*         axios.get(\"https://nexogenshares.blob.core.windows.net/recruitment/trucktimeline.json\")\n        .then(response => {\n            // setTrucks, setOrders, setData\n            }); */\n            //because of CORS restriction, data is read from a file\n            axios.get(\"../data.json\").then((response) => {\n                setData(response.data);\n                setOrders(response.data.orders);\n                setTrucks(response.data.trucks);\n                let currentTrucksPositions = calculateDefaultPositions();\n                setDisplayedTrucks(currentTrucksPositions);\n              }).catch(error => console.log(\"request error\", error));\n        }, []);\n\n\n    useEffect(() => {\n        //setTrucks based on the new position of the vertical slider\n        const verticalUnit = 100/(trucks.length);\n        const x = Math.floor((100 - verticalPosition)/verticalUnit);\n        let newTruckPositions;\n        if (x > trucks.length - numberOfTimePs){\n            newTruckPositions = [trucks.length - 3, trucks.length - 2, trucks.length - 1];\n        } else {\n            newTruckPositions = [x, x + 1, x + 2];\n        }\n        //change the set of trucks\n        if (!filterOn) setDisplayedTrucks(newTruckPositions);\n    }, [verticalPosition, filterOn, trucks]);\n\n    useEffect(() => {\n        //update orders based on new trucks\n        if (trucks.length > 0 && data.orders.length > 0){\n            let newOrders = [];\n            for(let truckPosition of displayedTrucks){\n                newOrders.push(...trucks[truckPosition].assignedOrderId);\n            }\n            const newOrderData = data.orders.filter(order => newOrders.includes(order.id));\n            setOrders(newOrderData);\n            const firstTimePoint = calculateMinTime(newOrderData);\n            const timePoints = generateDisplayedTimePoints(firstTimePoint, numberOfTimePs);\n            if (orders.length > 0) setDatesShown(timePoints);\n        }\n\n    }, [displayedTrucks]);\n\n    useEffect(() => {\n        const horizontalUnit = calculateHorizontalUnit();\n        const newFirstTimePoint = calculateMinTime(orders) + horizontalPosition*horizontalUnit;\n        const newDisplayedPoints = [];\n        for (let i = 0; i < numberOfTimePs; i++){\n            newDisplayedPoints.push(newFirstTimePoint + timeStep*i);\n        }\n        if (orders.length > 0) setDatesShown(newDisplayedPoints);\n    }, [horizontalPosition]);\n\n\n    return (\n        <div className=\"container\">\n            <nav className=\"searchField\">\n                <h1 className=\"fieldTitle\">Truck board</h1>\n                <div className=\"inputGroup\">\n                    <label htmlFor=\"searchField\">Filter by truck name: </label>\n                    <input type=\"text\" id=\"searchField\" className=\"searchBar\" placeholder=\"filter by truck name(s) max. 4\" onChange={handleSearchRequest}></input>\n                </div>\n            </nav>\n            {data && datesShown.length > 0 && !isNaN(datesShown[0]) && <div className=\"displayField\">\n                <VerticalSlider position={verticalPosition} changeVerticalPosition={setVerticalPosition} />\n                <div className=\"timeLine\">\n                    { datesShown.map( date => <TimePoint key={date} date={formatDate(date)} position={calculateTimePointOffset(date)} />) }\n                    { orders.length > 0 && trucks.filter((truck,index) => displayedTrucks.includes(index) ).map((truck, inx) => <Truck \n                            key={truck.name}\n                            timeLineWidth={Math.floor(timeLineWidth)}\n                            truckName={truck.name}\n                            fromTop={inx*truckStepSize + truckLineOffset +\"vh\"}\n                            firstCurrentTimePoint={Math.floor(calculateAbsoluteT0())}\n                            orders={truck.assignedOrderId.map( order => {\n                            let ordArr = data.orders.filter( ord => ord.id === order)\n                            return ordArr[0];})}/>\n                        )}\n                    <HorizontalSlider changeHorizontalPosition={setHorizontalPosition}/>\n                </div>\n            </div> }\n        </div>\n    )\n}\n\nexport default Layout\n","/home/juli/Documents/nexogen/truck-timeline/src/components/stateless/TimePoint.js",[],"/home/juli/Documents/nexogen/truck-timeline/src/components/stateless/Truck.js",[],"/home/juli/Documents/nexogen/truck-timeline/src/components/stateless/Order.js",[],"/home/juli/Documents/nexogen/truck-timeline/src/components/stateless/VerticalSlider.js",[],"/home/juli/Documents/nexogen/truck-timeline/src/components/stateless/HorizontalSlider.js",[],"/home/juli/Documents/nexogen/truck-timeline/src/utils/utilities.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":168,"column":8,"nodeType":"54","endLine":168,"endColumn":25,"suggestions":"55"},{"ruleId":"52","severity":1,"message":"56","line":178,"column":8,"nodeType":"54","endLine":178,"endColumn":28,"suggestions":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data.orders', 'generateDisplayedTimePoints', 'orders.length', and 'trucks'. Either include them or remove the dependency array.","ArrayExpression",["60"],"React Hook useEffect has missing dependencies: 'calculateHorizontalUnit', 'orders', and 'timeStep'. Either include them or remove the dependency array.",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},"Update the dependencies array to be: [data.orders, displayedTrucks, generateDisplayedTimePoints, orders.length, trucks]",{"range":"66","text":"67"},"Update the dependencies array to be: [calculateHorizontalUnit, horizontalPosition, orders, timeStep]",{"range":"68","text":"69"},[6293,6310],"[data.orders, displayedTrucks, generateDisplayedTimePoints, orders.length, trucks]",[6731,6751],"[calculateHorizontalUnit, horizontalPosition, orders, timeStep]"]